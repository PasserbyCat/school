function [featureTable,outputTable] = diagnosticFeatures(inputData)
%DIAGNOSTICFEATURES recreates results in Diagnostic Feature Designer.
%
% Input:
%  inputData: A table or a cell array of tables/matrices containing the
%  data as those imported into the app.
%
% Output:
%  featureTable: A table containing all features and condition variables.
%  outputTable: A table containing the computation results.
%
% This function computes features:
%  d_sigstats/RMS
%  d_sigstats/ShapeFactor
%  d_sigstats/Std
%  d_os_spec/PeakAmp1
%  d_os_spec/BandPower
%  d_os_spec_1/PeakAmp1
%  d_os_spec_1/PeakAmp2
%  d_os_spec_1/BandPower
%
% Organization of the function:
% 1. Compute signals/spectra/features
% 2. Extract computed features into a table
%
% Modify the function to add or remove data processing, feature generation
% or ranking operations.

% Auto-generated by MATLAB on 25-May-2022 05:59:20

% Create output ensemble.
outputEnsemble = workspaceEnsemble(inputData,'DataVariables',"d",'ConditionVariables',"label");

% Reset the ensemble to read from the beginning of the ensemble.
reset(outputEnsemble);

% Append new signal or feature names to DataVariables.
outputEnsemble.DataVariables = unique([outputEnsemble.DataVariables;"d_sigstats";"d_os";"d_os_spec";"d_os_spec_1"],'stable');

% Set SelectedVariables to select variables to read from the ensemble.
outputEnsemble.SelectedVariables = "d";

% Loop through all ensemble members to read and write data.
while hasdata(outputEnsemble)
    % Read one member.
    member = read(outputEnsemble);

    % Get all input variables.
    d = readMemberData(member,"d","Var1");
    iv = (0:1:(height(d)-1)*1)';
    d.Sample = iv;

    % Initialize a table to store results.
    memberResult = table;

    %% SignalFeatures
    try
        % Compute signal features.
        inputSignal = d.Var1;
        RMS = rms(inputSignal,'omitnan');
        ShapeFactor = rms(inputSignal,'omitnan')/mean(abs(inputSignal),'omitnan');
        Std = std(inputSignal,'omitnan');

        % Concatenate signal features.
        featureValues = [RMS,ShapeFactor,Std];

        % Package computed features into a table.
        featureNames = ["RMS","ShapeFactor","Std"];
        d_sigstats = array2table(featureValues,'VariableNames',featureNames);
    catch
        % Package computed features into a table.
        featureValues = NaN(1,3);
        featureNames = ["RMS","ShapeFactor","Std"];
        d_sigstats = array2table(featureValues,'VariableNames',featureNames);
    end

    % Append computed results to the member table.
    memberResult = [memberResult, ...
        table({d_sigstats},'VariableNames',"d_sigstats")]; %#ok<AGROW>

    %% OrderSpectrum
    try
        % Compute effective sampling rate.
        tNumeric = time2num(d.Sample,"seconds");
        [Fs,irregular] = effectivefs(tNumeric);

        % Resample non-uniform signals.
        x = d.Var1;
        if irregular
            x = resample(x,tNumeric,Fs,'linear');
        end

        % Compute the rpm signal.
        rpm = 100*ones(size(x));

        % Compute the order spectrum.
        [map,order] = rpmordermap(x,Fs,rpm(1:length(x)),'Window','hamming', ...
            'OverlapPercent',50,'Amplitude','power');
        [ps,order] = orderspectrum(map,order);

        ps = table(order, ps, 'VariableNames', ["Order", "SpectrumData"]);
        ps.Properties.VariableUnits = ["cycles/sample", ""];
        ps = addprop(ps, {'SampleFrequency'}, {'table'});
        ps.Properties.CustomProperties.SampleFrequency = Fs;
        d_os = ps;
    catch
        d_os = table(NaN, NaN, 'VariableNames', ["Order", "SpectrumData"]);
    end

    % Append computed results to the member table.
    memberResult = [memberResult, ...
        table({d_os},'VariableNames',"d_os")]; %#ok<AGROW>

    %% SpectrumFeatures
    try
        % Compute spectral features.
        % Get frequency unit conversion factor.
        factor = 2*pi;
        ps = d_os.SpectrumData;
        w = d_os.Order;
        w = factor*w;
        mask_1 = (w>=factor*0) & (w<=factor*0.301714285714286);
        ps = ps(mask_1);
        w = w(mask_1);

        % Compute spectral peaks.
        [peakAmp,peakFreq] = findpeaks(ps,w/factor,'MinPeakHeight',-Inf, ...
            'MinPeakProminence',0,'MinPeakDistance',0.001,'SortStr','descend','NPeaks',1);
        peakAmp = [peakAmp(:); NaN(1-numel(peakAmp),1)];
        peakFreq = [peakFreq(:); NaN(1-numel(peakFreq),1)];

        % Extract individual feature values.
        PeakAmp1 = peakAmp(1);
        BandPower = trapz(w/factor,ps);

        % Concatenate signal features.
        featureValues = [PeakAmp1,BandPower];

        % Package computed features into a table.
        featureNames = ["PeakAmp1","BandPower"];
        d_os_spec = array2table(featureValues,'VariableNames',featureNames);
    catch
        % Package computed features into a table.
        featureValues = NaN(1,2);
        featureNames = ["PeakAmp1","BandPower"];
        d_os_spec = array2table(featureValues,'VariableNames',featureNames);
    end

    % Append computed results to the member table.
    memberResult = [memberResult, ...
        table({d_os_spec},'VariableNames',"d_os_spec")]; %#ok<AGROW>

    %% SpectrumFeatures
    try
        % Compute spectral features.
        % Get frequency unit conversion factor.
        factor = 2*pi;
        ps = d_os.SpectrumData;
        w = d_os.Order;
        w = factor*w;
        mask_1 = (w>=factor*0) & (w<=factor*0.301714285714286);
        ps = ps(mask_1);
        w = w(mask_1);

        % Compute spectral peaks.
        [peakAmp,peakFreq] = findpeaks(ps,w/factor,'MinPeakHeight',-Inf, ...
            'MinPeakProminence',0,'MinPeakDistance',0.001,'SortStr','descend','NPeaks',2);
        peakAmp = [peakAmp(:); NaN(2-numel(peakAmp),1)];
        peakFreq = [peakFreq(:); NaN(2-numel(peakFreq),1)];

        % Extract individual feature values.
        PeakAmp1 = peakAmp(1);
        PeakAmp2 = peakAmp(2);
        BandPower = trapz(w/factor,ps);

        % Concatenate signal features.
        featureValues = [PeakAmp1,PeakAmp2,BandPower];

        % Package computed features into a table.
        featureNames = ["PeakAmp1","PeakAmp2","BandPower"];
        d_os_spec_1 = array2table(featureValues,'VariableNames',featureNames);
    catch
        % Package computed features into a table.
        featureValues = NaN(1,3);
        featureNames = ["PeakAmp1","PeakAmp2","BandPower"];
        d_os_spec_1 = array2table(featureValues,'VariableNames',featureNames);
    end

    % Append computed results to the member table.
    memberResult = [memberResult, ...
        table({d_os_spec_1},'VariableNames',"d_os_spec_1")]; %#ok<AGROW>

    %% Write all the results for the current member to the ensemble.
    writeToLastMemberRead(outputEnsemble,memberResult)
end

% Gather all features into a table.
featureTable = readFeatureTable(outputEnsemble);

% Set SelectedVariables to select variables to read from the ensemble.
outputEnsemble.SelectedVariables = unique([outputEnsemble.DataVariables;outputEnsemble.ConditionVariables;outputEnsemble.IndependentVariables],'stable');

% Gather results into a table.
outputTable = readall(outputEnsemble);
end
